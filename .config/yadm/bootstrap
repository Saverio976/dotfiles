#!/bin/sh
set -x

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME"

echo "Init submodules"
yadm submodule update --recursive --init

. ./.zshenv

ln -sf "$XDG_DATA_HOME/yadm-project/yadm" "$XDG_LOCAL_BIN_HOME/yadm"

echo "info for git config"
echo "What is your name: (can be empty)"
read NAME
if [[ "$NAME" != "" ]]; then
    NAME_LINE=$(grep "name =" "$XDG_CONFIG_HOME")
    [ -n "$NAME_LINE" ] && sed -i "s/$NAME_LINE/    name = $NAME/g" "$XDG_CONFIG_HOME/git/config"
fi
echo "What is your email: (can be empty)"
read EMAIL
if [[ "$EMAIL" != "" ]]; then
    EMAIL_LINE=$(grep "email =" "$XDG_CONFIG_HOME")
    [ -n "$EMAIL_LINE" ] && sed -i "s/$EMAIL_LINE/    name = $EMAIL/g" "$XDG_CONFIG_HOME/git/config"
fi
echo "Do you want to sign your commit with gpg key ? (y/N)(/empty = n) : "
read CHOICE
if [[ "$CHOICE" == "y" ]] || [[ "$CHOICE" == "Y" ]]; then
    echo "What is your signingKey : "
    read SINGINGKEY
    SIGNINGKEY_LINE=$(grep "signingkey =")
    [ -n "$SIGNINGKEY_LINE" ] && sed -i "s/$SIGNINGKEY_LINE/    signingkey = $SINGINGKEY" "$XDG_CONFIG_HOME/git/config"
else
    SIGNINGKEY_LINE=$(grep "signingkey =")
    [ -n "$SIGNINGKEY_LINE" ] && sed -i "/$SIGNINGKEY_LINE/d" "$XDG_CONFIG_HOME/git/config"
    GPGSIGN_LINE=$(grep )
    [ -n "$GPGSIGN_LINE" ] && sed -i "s/$GPGSIGN_LINE/    gpgsign = false/g" "$XDG_CONFIG_HOME/git/config"
fi

echo "Re cache all fonts"
fc-cache -f -v
